[["index.html", "Bioestatística e linguagem R na era da inteligência artificial 1 Apresentação 1.1 Quem somos? 1.2 Iniciativas 1.3 Projetos de Pesquisa", " Bioestatística e linguagem R na era da inteligência artificial Prof. Dr. Iuri E. P. Ferreira e Prof. Dr. Jorge L. R. Pantoja Filho. Universidade Federal de São Carlos, Campus Lagoa do Sino 5 de outubro de 2023 1 Apresentação 1.1 Quem somos? Este material foi elaborado pela equipe do Centro de Modelagem Estatística em Ciências Ambientais (Ce-MECA), da UFSCar Lagoa do Sino. Visite o nosso site! 1.2 Iniciativas Projeto Ciência de Dados na Lagoa do Sino O programa estabelece um espaço devotado à discussão e popularização da Ciência de Dados, a fim de criar uma ponte entre educandos da UFSCar e profissionais e empresas da área. Grupo de Ciência de Dados e Aplicações Tecnológicas As aplicações em Ciência dos Dados são crescentes, e o seu impacto na sociedade hoje é imensurável. Hoje, encontramos algoritmos estatísticos em produção por toda a parte: nos sites de notícias, nas redes sociais, nos carros autônomos, no marketing digital etc. Atualmente, a inteligência artificial tem impactado todas as áreas criativas, e suas diversas aplicações abrem novas possibilidades e nos causam espanto. Nos dias atuais, um volume crescente de dados é gerado, e este volume está aquém das capacidades humanas de processamento e aquisição de conhecimento. Neste contexto, há uma demanda crescente por cientistas de dados. Recentemente, na UFSCar Lagoa do Sino, um grupo multidisciplinar de pesquisadores tem se reunido frequentemente para discutir pautas relacionadas à Ciência de Dados e suas aplicações nas mais diversas áreas do conhecimento. Linhas de Pesquisa: + Aprendizado de Máquinas + Modelagem Estatística em Ciências Ambientais e Ecologia + Vieses e Processos de Tomada de Decisões Programas de Iniciação Científica e Estágios Estudos e Capacitações 1.3 Projetos de Pesquisa .scrollable-section { height: 500px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; } Biomastats Um pacote para a elaboração de relatórios ambientais automatizados sobre o uso e a ocupação do solo no Brasil. Fontana, KO; Souza, CA; Molin, PG; Santana, MF; Ferreira, IEP. Fomento: CNPq Plataforma MBA Plataforma de simulação baseada em multi-agentes (MBA) e o controle populaciona do Java Porco (Sus scrofa) no Sudoeste Paulista Bassani, FB; Sanches, A; Ferreira, IEP et al. SIG Socioambiental Um sistema para a visualização e análise de dados socioambientais em recortes do terrotório brasileiro Bilia, G; Pantoja-Filho, JLR; Ferreira, IEP et al. Métricas da Paisagem Implementação computacional de módulos de processamento, análise e visualização de métricas de paisagens no programa Biomastats Camargo, V; Carvalho, HL; Tiezzi, RO; Ferreira, IEP et al. Fomento: CNPq Modelos Bent-cable e lhas Pequenas Aplicação de modelos segmentados com transição de fase suave para explicar o Efeito de Ilhas Pequenas a partir da existência de limiares aleatórios Santana, MF; Zocchi, SS; Leandro, RA; Martensen, AC; Ferreira, IEP Biomastats GUI Desenvolvimento e implantação da Interface Gráfica do Usuário para o programa Biomastats via aplicativos shiny Santana, MF; Ferreira, IEP Fomento: CNPq "],["origem-do-r.html", "2 Origem do R", " 2 Origem do R R é uma linguagem de programação criada por Ross Ihaka e Robert Gentleman, na universidade de Auckland, Nova Zelândia, em meados dos anos 1990. A linguagem R foi uma adaptação da linguagem S, criada por John Chambers em 1976, nos laboratórios Bell. R também denomina um programa computacional destinado a análises estatísticas e visualização de dados. O programa R é livre ( General Public License ) e possui código-fonte aberto, sendo aprimorado continuamente por uma rede global de colaboradores, a partir da R Foundation for Statistical Computing , sediada em Viena, na Áustria. A linguagem R já esteve em 8º dentre as mais populares, no entanto, hoje ela ocupa a 18º posição de acordo com The TIOBE Programming Community index (TIOBE, 2023) . "],["primeiros-passos.html", "3 Primeiros passos", " 3 Primeiros passos details > summary { font-weight: bold; margin-top: 10px; cursor: pointer; } details > p { margin-left: 20px; } details > details > summary { margin-left: 20px; } Instalação Para instalar o R, acesse a página oficial da organização _The R Project for Statistical Computing em &lt; https://cran.r-project.org/ &gt; . O usuário deverá escolher o arquivo de acordo com o seu sistema operacional. Execução de códigos O R é uma linguagem interpretada. Isso significa que partes do código podem ser executadas diretamente do interpretador (interface R), sem a necessidade de compilar todo código e montar um arquivo executável (.exe). Dessa forma, o usuário seleciona o pedaço do código que deseja executar e, de imediato, tem o resultado impresso no terminal de saída ou na janela gráfica. Se houver erro de sintaxe/interpretação, o programa exibirá um alerta no terminal de saída. Exercício Abra a interface básica do R (R-GUI) e execute o código a seguir: x &lt;- rnorm(100, 10, 15) summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -29.796 1.501 12.017 9.874 21.754 46.526 Criando scripts Após abrir a interface R, o usuário deverá criar um script (.txt ou .R) no qual os comandos serão salvos. Para executar um bloco de comandos, o usuário deverá selecioná-lo com o cursor do mouse (deixando-o em realce) e, então, pressionar F5 ou CTRL+ENTER, a depender da interface em uso. Outra opção é executar o comando, linha a linha, até completar o bloco de comandos desejado. Exercício Abra a interface gráfica do R de preferência e crie um novo arquivo de script R. Escreva algumas linhas de códigos, com comentários. Salve o script em um novo diretório. # crie uma lista de números aleatórios normalmente distribuídos x &lt;- rnorm(100, 10, 15) # faça um resumo estatístico dos valores obtidos summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -33.436 -1.598 9.552 9.190 21.518 37.353 # desenhe um diagrama de caixas para os valores amostrados boxplot(x, main = &quot;Diagrama de Caixas&quot;, ylab = &quot;Valores amostrados&quot;) Atribuição de valores No R, os resultados podem ser obtidos a partir do uso de funções/expressões ou serem atribuídos a variáveis e gravados na memória do computador. Há diversas formas de atribuir valores a uma variável: nome &lt;- valor; valor -&gt; nome; nome = valor. Tanto -&gt; como = funcionam como comandos de atribuição. Uma vantagem do R é o fato de não ser requerida a declaração/inicialização de variáveis, tipos e tamanhos ao início do programa, como é comum em outras linguagens. R é uma linguagem case sensitive, isso significa que letras maiúsculas e minúsculas são diferenciadas no programa. Portanto, uma variável de nome x será diferente de outra com nome X. Exemplo Execute as linhas de código a seguir e observe a diferença: # Valores atribuídos a variáveis locais x&lt;-5 10-&gt;X # Diferença entre as variáveis &quot;x&quot; e &quot;X&quot; 5*x; 5*X ## [1] 25 ## [1] 50 "],["tipos-de-dados.html", "4 Tipos de dados", " 4 Tipos de dados details > summary { font-weight: bold; margin-top: 10px; cursor: pointer; } details > p { margin-left: 20px; } details > details > summary { margin-left: 20px; } Há diversos tipos de dados que podem ser armazenados na memória do computador e manipulados a partir do programa R. Os dados podem ser numéricos (reais ou inteiros), lógicos (verdadeiro ou falso), caracteres (sequências alfanuméricas), números complexos ou funções. Exemplos Dado real / ponto flutuante 1/3 ## [1] 0.3333333 Dado inteiro round(1/3) ## [1] 0 Dado lógico 1&lt;3 ## [1] TRUE Dado alfanumérico nome &lt;- &quot;Carlos Henrique&quot; Dado complexo # Complexo (5+6i) - (3-2i) ## [1] 2+8i Função parabola &lt;- function(x, a, b, c){ a*x^2 + b*x + c } parabola(x = 2, a = 1, b = 1, c = 3) ## [1] 9 O comando mode retorna o tipo do dado guardado no objeto que entra como argumento da função (entre parênteses). Exemplo mode(parabola) ## [1] &quot;function&quot; "],["operações-básicas-e-funções-matemáticas.html", "5 Operações Básicas e Funções Matemáticas 5.1 Principais estruturas de dados 5.2 UFSCar Lagoa do Sino 5.3 Ce-MECA 5.4 Ciência de Dados e Aplicações Tecnológicas 5.5 Usage 5.6 Render book 5.7 Preview book", " 5 Operações Básicas e Funções Matemáticas No R, as operações aritméticas são definidas de maneira intuitiva. # aritmética l&lt;-23 l^2+2*l ## [1] 575 3*2+2 ## [1] 8 3*(2+2) ## [1] 12 3/2 ## [1] 1.5 Mais operações matemáticas são listadas aqui. Além disso, diversas funções matemáticas são pré-definidas no R. # Arredondar (duas casas decimais) round(17/3,2) ## [1] 5.67 # seno, cosseno, tangente, arco-tangente, tengente hiperbólica sin(pi);cos(pi);tan(pi);atan(0.5);tanh(0.5) ## [1] 1.224606e-16 ## [1] -1 ## [1] -1.224647e-16 ## [1] 0.4636476 ## [1] 0.4621172 # raiz quadrado, exponencial, log natural, log na base 10 e módulo sqrt(4);exp(2);log(10);log10(10);abs(-6.5) ## [1] 2 ## [1] 7.389056 ## [1] 2.302585 ## [1] 1 ## [1] 6.5 Por sua vez, comparações e controle de fluxo dependem de operadores lógicos, ou seja, que resultam em TRUE ou FALSE. Observe que == não é um comando de atribuição, mas trata-se de uma comparação lógica de igualdade. Com comandos lógicos, também é possível estabelecer a união e a interseção entre conjuntos: (cond. 1)&amp;(cond. 2) será verdade (TRUE) apenas se as condições 1 e 2 forem satisfeitas simultaneamente; por outro lado, (cond. 1)|(cond. 2) será verdade se a condição 1 ou a condição 2 (ou ambas) forem satisfeitas. # Exemplo 1 nome &lt;- &quot;José&quot; # A variável é um número? is.numeric(nome) ## [1] FALSE # A variável é um caracter? is.character(nome) ## [1] TRUE # Exemplo 2 l&lt;-1 # A variável é igual a 23? l==23 ## [1] FALSE # A variável é menor do que 15? l&lt;15 ## [1] TRUE # A variável é menor do que 23 l&lt;=23 ## [1] TRUE # atribuição (nova variável) a&lt;-17 # condição 1 E condição 2 (a&lt;15)&amp;(l&gt;23) ## [1] FALSE (a&lt;15)&amp;(l&gt;=23) ## [1] FALSE # condição 1 OU condição 2 (a&lt;15)|(l&gt;23) ## [1] FALSE (a&lt;15)|(l&gt;=23) ## [1] FALSE 5.1 Principais estruturas de dados 5.1.1 Vetores Vetor é o tipo de estrutura de dados mais simples. Trata-se de uma sequência de valores a serem armazenados na memória do computador. Observe que tais valores não são necessariamente números, mas podem ser nomes e/ou categorias ou valores lógicos (TRUE ou FALSE). Cada elemento de um vetor é um componente. Uma lista pode ser construída a partir da combinação de elementos do mesmo tipo, através do comando (combine). Sua sintaxe é c(element 1, element 2, ) . Observe que os elementos são separados por vírgulas. Se os elementos forem números decimais, as unidades e os decimais serão separados por pontos, como na Língua Inglesa. # Vetor c/ números inteiros de 1 a 10 v&lt;-c(1,2,3,4,5,6,7,8,9,10) # Impressão do vetor armazenado print(v) ## [1] 1 2 3 4 5 6 7 8 9 10 # Quinto elemento do vetor v[5] ## [1] 5 # Vetor c/ nomes dos alunos nomes&lt;-c(&quot;Raul&quot;,&quot;Zulmira&quot;,&quot;Edmilson&quot;,&quot;Jaquelina&quot;,&quot;Gabriela&quot;,&quot;Hudson&quot;) # Impressão do vetor armazenado nomes ## [1] &quot;Raul&quot; &quot;Zulmira&quot; &quot;Edmilson&quot; &quot;Jaquelina&quot; &quot;Gabriela&quot; &quot;Hudson&quot; # Obs: Nomes e rótulos sempre devem ser incluídos com aspas duplas. # Vetor com valores lógicos # Quais elementos de v são divisíveis por 2? v%%2 ## [1] 1 0 1 0 1 0 1 0 1 0 # Observe que o operador %% indica a divisibilidade # (0 = não divisível / 1 = divisível) as.logical(v%%2) ## [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE # Aqui os valores foram transformados em variáveis lógicas # (i.e. TRUE = Verdadeiro = 1; FALSE = Falso = 0) Quando digitamos vetor[2], o número disposto entre colchetes é uma subscrição. A subscrição indica a posição de um dado dentro de uma estrutura de dados. Obviamente, a subscrição é um número inteiro e dentro dos limites de tamanho da lista. A subscrição/índice varia de 1 até N, em que N é o número de elementos na lista. Diversas operações com vetores e entre vetores e matrizes são pré-definidas no R. No exemplo abaixo, identifique a diferença entre o produto ponto-a-ponto e a multiplicação escalar (produto interno). # Definição de dois vetores quaisquer v &lt;- c(12,3,4,25,7,8) r &lt;- c(13,15,4,21,2,3) # Comprimento de um vetor length(v) ## [1] 6 # Multiplicação ponto-a-ponto v*r ## [1] 156 45 16 525 14 24 # Produto escalar &lt;v,r&gt; v%*%r ## [,1] ## [1,] 780 5.1.2 Arrays ou matrizes Arrays e matrizes são estruturas de dados bidimensionais, cujas as entradas apresentam subscrições para as linhas e colunas. # Criando um banco de dados dados&lt;-data.frame(v,r) # Leitura das 3 linhas iniciais head(dados,3) ## v r ## 1 12 13 ## 2 3 15 ## 3 4 4 # acessando a coluna &quot;v&quot; do banco de dados dados$v ## [1] 12 3 4 25 7 8 # Acessando o elemento da linha 3 e coluna 2 dados[3,2] ## [1] 4 # Dimenões do banco de dados dim(dados) ## [1] 6 2 No exemplo abaixo, definimos uma matriz com 3 linhas (nr = number of lines) e cujo preenchimento segue a ordem das colunas (byrow = FALSE). Diversas operações matriciais são possíveis, tais como: transposição, inversão, multiplicação, cálculo de autovalores, autovetores e determinantes. Essas operações têm grande relevância na Estatística. # Definindo a matriz A&lt;-matrix(c(2,3,4,5,6,7),nr=3,byrow=FALSE) A ## [,1] [,2] ## [1,] 2 5 ## [2,] 3 6 ## [3,] 4 7 # Obtenção da transposta t(A) ## [,1] [,2] [,3] ## [1,] 2 3 4 ## [2,] 5 6 7 # Definindo outra matriz B&lt;-matrix(c(2,3,4,5,6,7,8,9,10),nr=3,byrow=FALSE) B ## [,1] [,2] [,3] ## [1,] 2 5 8 ## [2,] 3 6 9 ## [3,] 4 7 10 # Cálculo do determinante det(B) ## [1] 0 # Tentativa - Cálculo da Inversa try(solve(B)) ## Error in solve.default(B) : ## Lapack routine dgesv: system is exactly singular: U[3,3] = 0 # Nova matriz B2&lt;-matrix(c(2,3,28,5,6,12,8,9,5),nr=3,byrow=FALSE) det(B2) ## [1] -27 solve(B2) ## [,1] [,2] [,3] ## [1,] 2.888889 -2.629630 0.1111111 ## [2,] -8.777778 7.925926 -0.2222222 ## [3,] 4.888889 -4.296296 0.1111111 # multiplicação ponto-a-ponto B*B2 ## [,1] [,2] [,3] ## [1,] 4 25 64 ## [2,] 9 36 81 ## [3,] 112 84 50 # multiplicação matricial B%*%B2 ## [,1] [,2] [,3] ## [1,] 243 136 101 ## [2,] 276 159 123 ## [3,] 309 182 145 5.2 UFSCar Lagoa do Sino This is a sample book written in Markdown. You can use anything that Pandocs Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 5.3 Ce-MECA 5.4 Ciência de Dados e Aplicações Tecnológicas 5.5 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 5.6 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select All formats if youd like to use multiple formats from the same book source files. Or build the book from the R console:{r, eval=FALSE} bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, youll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 5.7 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in Preview book, or from the R console: bookdown::serve_book() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
